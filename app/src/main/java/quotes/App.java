/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

public class App {

    public static ArrayList<Quotes> readFile() throws IOException {
        String path = "./app/src/main/resources/recentquotes.json";
        BufferedReader reader = new BufferedReader(new FileReader(path));
        Type quotesArrayList = new TypeToken<ArrayList<quotes.Quotes>>() {
        }.getType();
        GsonBuilder builder = new GsonBuilder();
        Gson gson = builder.create();
        ArrayList<Quotes> converter = gson.fromJson(reader, quotesArrayList);
        return converter;
    }

    public static void main(String[] args) throws IOException {
//        int value =new Random().nextInt(readFile().size()-1);
//        System.out.println(value + "    This is the index");
//        System.out.println(readFile().get(value).toString());
        System.out.println("Welcome to the Web");
        // MalformedURLException and FileNoFoundException inherit from IOException
        String url = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setConnectTimeout(5000);
        connection.setReadTimeout(5000);
        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            // HTTP CONNECT VERB
            // DELETE PUT POST GET OPTIONS HEAD PATCH
            //connection.setRequestMethod("GET");
            System.out.println(connection);
            InputStreamReader inputStreamReader = new InputStreamReader(connection.getInputStream());
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
            // this data is the JSON
            String data = bufferedReader.readLine();
            System.out.println(data);
            bufferedReader.close();
            Gson gson = new Gson();
            QuotesAPI quotesApi = gson.fromJson(data, QuotesAPI.class);
            System.out.println(" My QUOTES  >>>\n               >>>" + quotesApi.quoteText);

            BufferedWriter add = new BufferedWriter(new FileWriter("./app/src/main/resources/recentquotes.json", false));
            QuotesAPI qutApi = gson.fromJson(bufferedReader, QuotesAPI.class);
            Quotes quotLocal = new Quotes(null, qutApi.getQuoteAuthor(), null, qutApi.getQuoteText());
            Quotes.add(quotLocal);
            gson = gson.newBuilder().setPrettyPrinting().create();


            System.out.println("Quote from API: " + quotLocal);
            add.write(gson.toJson(Quotes.class));
            add.close();
        } else {
            System.out.println("Request unable to processed");
        }
    }



}